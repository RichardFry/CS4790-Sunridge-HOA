@model List<SunridgeHOA.Areas.Admin.Models.BoardMember>
@{
    ViewData["Title"] = "Index";
}

<!-- Header Title -->
<section class="p-5">
    <div class="container">
        <div class="container container-fluid no2">
            <h1 class="main-heading mb-4 mt-4 text-center">Board Members</h1>
        </div>
    </div>
</section>

<div class="container">
    @{
        int numOfColumns = 3; //Number of columsn per row.
        int numCompleteRows = (int)Math.Ceiling((double)(Model.Count / numOfColumns)); //Number of rows that contains NumOfColumns columns
        int numTrailingColumns = Model.Count % numOfColumns; //Number of columns that dont fit in a neat row
        int index = 0;
    }
    @for (int row = 0; row < numCompleteRows; row++)
    {
        //Create N rows of numOfColumns columns.
        <div class="row">
            @for (int col = 0; col < numOfColumns; col++)
            {
                index = (row * numOfColumns) + col;
                var boardMember = Model[index]; //Access the boardMember from the list of returned boardMember models

                //Create a lot string because an owner can have multiple lots. 
                string boardMembersLots;
                if (boardMember.Owner.OwnerLots != null && boardMember.Owner.OwnerLots.Count > 0)
                {
                    List<string> lots = boardMember.Owner.OwnerLots.Select(x => x.Lot.LotNumber).ToList();
                    boardMembersLots = string.Join(',', lots);
                }
                else
                {
                    boardMembersLots = "None";
                }

                <div class="mb-5 col-lg-4">
                    <div class="testimonial-item mx-auto mb-5 mb-lg-0">
                        <img class="img-fluid rounded-circle mb-3" src="@boardMember.Photo.Image">
                        <h5>@boardMember.BoardPosition: @boardMember.Owner.FullName</h5>
                        <p class="font-weight-light mb-0">Lot: @boardMembersLots</p>
                        <p class="font-weight-light mb-0">Phone: @boardMember.Owner.Phone</p>
                        <p class="font-weight-light mb-0">Email: <a href="mailto:@boardMember.Owner.Email">@boardMember.Owner.Email</a></p>
                    </div>
                </div>
            }
        </div>
    }
    @if (numTrailingColumns > 0)
        //If we have extra columns that dont fit into a row evenly we come here
    {
        if (index == 0)
            //This is to handle when the boardmembers is only 1 or 2. dont worry bout it. 
        {
            index = -1;
        }
        <div class="row">
            @for (int col = 0; col < numTrailingColumns; col++)
            {
                index++;
                var boardMember = Model[index];

                //Create a lot string because an owner can have multiple lots. 
                string boardMembersLots;
                if (boardMember.Owner.OwnerLots != null && boardMember.Owner.OwnerLots.Count > 0)
                {
                    List<string> lots = boardMember.Owner.OwnerLots.Select(x => x.Lot.LotNumber).ToList();
                    boardMembersLots = string.Join(',', lots);
                }
                else
                {
                    boardMembersLots = "None";
                }

                <div class="mb-5 col-lg-4">
                    <div class="testimonial-item mx-auto mb-5 mb-lg-0">
                        <img class="img-fluid rounded-circle mb-3" src="@boardMember.Photo.Image">
                        <h5>@boardMember.BoardPosition: @boardMember.Owner.FullName</h5>
                        <p class="font-weight-light mb-0">Lot: @boardMembersLots</p>
                        <p class="font-weight-light mb-0">Phone: @boardMember.Owner.Phone</p>
                        <p class="font-weight-light mb-0">Email: <a href="mailto:@boardMember.Owner.Email">@boardMember.Owner.Email</a></p>
                    </div>
                </div>
            }
        </div>
    }
</div>